#define DIMS (262144)
static void matmult(PetscScalar *py, const PetscScalar *px, long nx)
{
    assert(DIMS == 262144);
    assert(nx == 262144);
    memset(py, 0, sizeof(PetscScalar)*nx);
    long v;
    int k;
    for(v=0; v<262144; v++)
    {
        if(v % 2048 == 0) {printf(".");fflush(stdout);}
        k = 0;
        k += countbits(v&131072) % 2;
        k += countbits(v&65536) % 2;
        k += countbits(v&32768) % 2;
        k += countbits(v&147456) % 2;
        k += countbits(v&24576) % 2;
        k += countbits(v&2048) % 2;
        k += countbits(v&5120) % 2;
        k += countbits(v&512) % 2;
        k += countbits(v&1024) % 2;
        k += countbits(v&131072) % 2;
        k += countbits(v&65536) % 2;
        k += countbits(v&32768) % 2;
        k += countbits(v&147456) % 2;
        k += countbits(v&24576) % 2;
        k += countbits(v&2048) % 2;
        k += countbits(v&5120) % 2;
        k += countbits(v&512) % 2;
        k += countbits(v&1024) % 2;
        k += countbits(v&256) % 2;
        k += countbits(v&128) % 2;
        k += countbits(v&256) % 2;
        k += countbits(v&128) % 2;
        k += countbits(v&64) % 2;
        k += countbits(v&32) % 2;
        k += countbits(v&16) % 2;
        k += countbits(v&160) % 2;
        k += countbits(v&80) % 2;
        k += countbits(v&128) % 2;
        k += countbits(v&256) % 2;
        k += countbits(v&80) % 2;
        k += countbits(v&256) % 2;
        k += countbits(v&80) % 2;
        k += countbits(v&264) % 2;
        k += countbits(v&32) % 2;
        k += countbits(v&264) % 2;
        k += countbits(v&32) % 2;
        k += countbits(v&256) % 2;
        k += countbits(v&160) % 2;
        k += countbits(v&260) % 2;
        k += countbits(v&34) % 2;
        k += countbits(v&4) % 2;
        k += countbits(v&130) % 2;
        k += countbits(v&1) % 2;
        k += countbits(v&32) % 2;
        k += countbits(v&1) % 2;
        k += countbits(v&32) % 2;
        k += countbits(v&264) % 2;
        k += countbits(v&1) % 2;
        k += countbits(v&12) % 2;
        k += countbits(v&17) % 2;
        k += countbits(v&260) % 2;
        k += countbits(v&16) % 2;
        k += countbits(v&17) % 2;
        k += countbits(v&34) % 2;
        k += countbits(v&17) % 2;
        k += countbits(v&34) % 2;
        k += countbits(v&4) % 2;
        k += countbits(v&17) % 2;
        k += countbits(v&4) % 2;
        k += countbits(v&17) % 2;
        k += countbits(v&36864) % 2;
        k += countbits(v&68096) % 2;
        k += countbits(v&8192) % 2;
        py[v] += px[v] * (63 - 2*k);
        // [0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0]
        py[v^64] += px[v];
        // [0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0]
        py[v^256] += px[v];
        // [0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0]
        py[v^128] += px[v];
        // [0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1]
        py[v^81] += px[v];
        // [0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0]
        py[v^16] += px[v];
        // [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0]
        py[v^8] += px[v];
        // [0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0]
        py[v^32] += px[v];
        // [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
        py[v^4] += px[v];
        // [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
        py[v^2] += px[v];
        // [0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0]
        py[v^64] += px[v];
        // [0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0]
        py[v^256] += px[v];
        // [0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0]
        py[v^128] += px[v];
        // [0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1]
        py[v^81] += px[v];
        // [0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0]
        py[v^16] += px[v];
        // [0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0]
        py[v^8] += px[v];
        // [0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0]
        py[v^32] += px[v];
        // [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
        py[v^4] += px[v];
        // [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0]
        py[v^2] += px[v];
        // [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
        py[v^65536] += px[v];
        // [0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
        py[v^32768] += px[v];
        // [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
        py[v^65536] += px[v];
        // [0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
        py[v^32768] += px[v];
        // [1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
        py[v^131072] += px[v];
        // [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0]
        py[v^4096] += px[v];
        // [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
        py[v^16384] += px[v];
        // [0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0]
        py[v^36864] += px[v];
        // [1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
        py[v^147456] += px[v];
        // [0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
        py[v^32768] += px[v];
        // [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
        py[v^65536] += px[v];
        // [1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
        py[v^147456] += px[v];
        // [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
        py[v^65536] += px[v];
        // [1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
        py[v^147456] += px[v];
        // [0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0]
        py[v^67584] += px[v];
        // [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0]
        py[v^4096] += px[v];
        // [0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0]
        py[v^67584] += px[v];
        // [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0]
        py[v^4096] += px[v];
        // [0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
        py[v^65536] += px[v];
        // [0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0]
        py[v^36864] += px[v];
        // [0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0]
        py[v^66048] += px[v];
        // [0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0]
        py[v^1024] += px[v];
        // [0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0]
        py[v^512] += px[v];
        // [0 0 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0]
        py[v^37888] += px[v];
        // [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
        py[v^24576] += px[v];
        // [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0]
        py[v^4096] += px[v];
        // [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
        py[v^24576] += px[v];
        // [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0]
        py[v^4096] += px[v];
        // [0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0]
        py[v^67584] += px[v];
        // [0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
        py[v^24576] += px[v];
        // [0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0]
        py[v^2560] += px[v];
        // [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
        py[v^8192] += px[v];
        // [0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0]
        py[v^66048] += px[v];
        // [0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
        py[v^16384] += px[v];
        // [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
        py[v^8192] += px[v];
        // [0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0]
        py[v^1024] += px[v];
        // [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
        py[v^8192] += px[v];
        // [0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0]
        py[v^1024] += px[v];
        // [0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0]
        py[v^512] += px[v];
        // [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
        py[v^8192] += px[v];
        // [0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0]
        py[v^512] += px[v];
        // [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0]
        py[v^8192] += px[v];
        // [0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0]
        py[v^162] += px[v];
        // [0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 1 0 0]
        py[v^268] += px[v];
        // [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1]
        py[v^1] += px[v];
    }
}
